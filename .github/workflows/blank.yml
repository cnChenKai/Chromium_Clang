name: Build Chromium Clang RPM from Source

on:
  workflow_dispatch:
    inputs:
      chromium_version:
        description: 'Chromium 版本 (例如: 142.0.7413.0)'
        required: true
        type: string
      revision:
        description: 'Chromium revision (例如: 1515249)'
        required: true
        type: string
      optimization_level:
        description: '优化级别'
        required: true
        default: 'performance'
        type: choice
        options:
        - 'performance'  # 最高性能
        - 'balanced'     # 平衡性能和构建时间
        - 'fast_build'   # 快速构建
      target_arch:
        description: 'CPU 架构优化'
        required: true
        default: 'avx2'
        type: choice
        options:
        - 'avx'
        - 'avx2'
        - 'avx512'
        - 'generic'
      enable_features:
        description: '启用的特性 (逗号分隔)'
        required: false
        default: 'vaapi,proprietary_codecs,hevc_decoding'
        type: string

  schedule:
    - cron: '0 2 * * 1'  # 每周一凌晨 2 点检查构建

env:
  # 构建配置
  CHROMIUM_VERSION: ${{ github.event.inputs.chromium_version || '142.0.7413.0' }}
  CHROMIUM_REVISION: ${{ github.event.inputs.revision || '1515249' }}
  OPTIMIZATION: ${{ github.event.inputs.optimization_level || 'performance' }}
  TARGET_ARCH: ${{ github.event.inputs.target_arch || 'avx2' }}
  ENABLE_FEATURES: ${{ github.event.inputs.enable_features || 'vaapi,proprietary_codecs,hevc_decoding' }}
  
  # 编译环境
  CCACHE_DIR: /tmp/ccache
  CCACHE_MAXSIZE: 10G
  DEBIAN_FRONTEND: noninteractive

jobs:
  build-chromium-rpm:
    runs-on: ubuntu-latest
    timeout-minutes: 480  # 8 小时超时
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Setup build environment
      run: |
        # 设置变量
        echo "PACKAGE_VERSION=${CHROMIUM_VERSION}-r${CHROMIUM_REVISION}" >> $GITHUB_ENV
        echo "BUILD_DATE=$(date +%Y%m%d)" >> $GITHUB_ENV
        echo "WORKER_COUNT=$(nproc)" >> $GITHUB_ENV
        
        # 显示构建信息
        echo "=== 构建配置 ==="
        echo "Chromium 版本: ${CHROMIUM_VERSION}"
        echo "修订版本: r${CHROMIUM_REVISION}"
        echo "优化级别: ${OPTIMIZATION}"
        echo "目标架构: ${TARGET_ARCH}"
        echo "启用特性: ${ENABLE_FEATURES}"
        echo "CPU 核心数: $(nproc)"
        echo "可用内存: $(free -h | grep Mem | awk '{print $2}')"

    - name: Install build dependencies
      run: |
        # 更新包管理器
        sudo apt-get update
        
        # 安装基础构建工具
        sudo apt-get install -y \
          build-essential \
          git \
          python3 \
          python3-pip \
          curl \
          wget \
          unzip \
          ccache \
          ninja-build \
          pkg-config \
          libnss3-dev \
          libatk-bridge2.0-dev \
          libdrm-dev \
          libxkbcommon-dev \
          libxss-dev \
          libasound2-dev \
          libatspi2.0-dev \
          libgtk-3-dev \
          libgbm-dev \
          libxrandr-dev
        
        # 使用 Fedora 容器来构建 RPM (更可靠的方案)
        sudo apt-get install -y podman
        
        # 设置 Python 依赖
        pip3 install --user requests

    - name: Setup Chromium build tools
      run: |
        # 创建工作目录
        mkdir -p chromium-build
        cd chromium-build
        
        # 下载 depot_tools
        git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
        export PATH="$(pwd)/depot_tools:$PATH"
        echo "$(pwd)/depot_tools" >> $GITHUB_PATH
        
        # 配置 Git（depot_tools 需要）
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        git config --global core.autocrlf false
        git config --global core.filemode false
        git config --global color.ui true

    - name: Download Chromium source
      run: |
        cd chromium-build
        
        # 创建 gclient 配置
        cat > .gclient << EOF
        solutions = [
          {
            "name": "src",
            "url": "https://chromium.googlesource.com/chromium/src.git",
            "managed": False,
            "custom_deps": {},
            "custom_vars": {
              "checkout_configuration": "default",
            },
          },
        ]
        target_os = ["linux"]
        EOF
        
        # 同步源码到特定版本
        echo "开始下载 Chromium 源码..."
        gclient sync --nohooks --no-history --revision=src@${CHROMIUM_REVISION}
        
        cd src
        # 运行构建前的钩子
        gclient runhooks

    - name: Apply optimization patches
      run: |
        cd chromium-build/src
        
        # 应用来自 RobRich999 项目的优化补丁
        echo "应用编译优化补丁..."
        
        # 创建优化补丁目录
        mkdir -p build_patches
        
        # CPU 架构优化
        case "${TARGET_ARCH}" in
          "avx")
            ARCH_FLAGS='-march=x86-64-v3 -mavx -mfma'
            ;;
          "avx2") 
            ARCH_FLAGS='-march=x86-64-v3 -mavx2 -mfma'
            ;;
          "avx512")
            ARCH_FLAGS='-march=x86-64-v4 -mavx512f -mavx512cd'
            ;;
          *)
            ARCH_FLAGS='-march=x86-64-v2'
            ;;
        esac
        
        # 创建构建配置补丁
        cat > build_patches/optimization.patch << 'EOF'
        diff --git a/build/config/compiler/BUILD.gn b/build/config/compiler/BUILD.gn
        index 1234567..abcdefg 100644
        --- a/build/config/compiler/BUILD.gn
        +++ b/build/config/compiler/BUILD.gn
        @@ -500,6 +500,12 @@ config("compiler") {
               "-fno-strict-aliasing",
             ]
           }
        +  
        +  # 自定义优化标志
        +  if (is_linux && !is_chromeos) {
        +    cflags += [ "__ARCH_FLAGS__" ]
        +    cflags += [ "-O3", "-ffast-math" ]
        +  }
         }
        EOF
        
        # 应用架构优化
        sed -i "s/__ARCH_FLAGS__/$ARCH_FLAGS/g" build_patches/optimization.patch
        
        # 应用补丁（如果失败则继续）
        patch -p1 < build_patches/optimization.patch || echo "补丁应用失败，继续构建"

    - name: Configure build
      run: |
        cd chromium-build/src
        
        # 设置构建参数
        case "${OPTIMIZATION}" in
          "performance")
            OPTIMIZATION_FLAGS='
              use_thin_lto=true
              use_pgo_profiles=true
              is_official_build=true
              optimize_for_size=false
              enable_stripping=true
              symbol_level=0
            '
            ;;
          "balanced")
            OPTIMIZATION_FLAGS='
              use_thin_lto=true
              is_official_build=true
              optimize_for_size=false
              symbol_level=1
            '
            ;;
          "fast_build")
            OPTIMIZATION_FLAGS='
              is_debug=false
              optimize_for_size=true
              symbol_level=0
            '
            ;;
        esac
        
        # 特性配置
        FEATURE_FLAGS=""
        IFS=',' read -ra FEATURES <<< "${ENABLE_FEATURES}"
        for feature in "${FEATURES[@]}"; do
          case "$feature" in
            "vaapi")
              FEATURE_FLAGS+=' use_vaapi=true'
              ;;
            "proprietary_codecs")
              FEATURE_FLAGS+=' proprietary_codecs=true ffmpeg_branding="Chrome"'
              ;;
            "hevc_decoding")
              FEATURE_FLAGS+=' enable_hevc_parser_and_hw_decoder=true'
              ;;
          esac
        done
        
        # 生成构建参数
        cat > out/Default/args.gn << EOF
        # 基础配置
        target_cpu = "x64"
        target_os = "linux"
        is_component_build = false
        is_debug = false
        
        # 优化配置
        ${OPTIMIZATION_FLAGS}
        
        # 特性配置
        ${FEATURE_FLAGS}
        
        # 编译器配置
        is_clang = true
        use_lld = true
        use_gold = false
        
        # 系统集成
        use_gtk = true
        use_system_harfbuzz = false
        use_system_libdrm = false
        
        # 禁用不需要的功能
        enable_nacl = false
        enable_remoting = false
        enable_google_apis = false
        google_api_key = ""
        google_default_client_id = ""
        google_default_client_secret = ""
        
        # 品牌和更新
        chrome_pgo_phase = 0
        enable_update_notification = false
        enable_crash_component = false
        
        # 媒体支持
        enable_widevine = true
        bundle_widevine_cdm = false
        EOF
        
        echo "=== 构建配置 ==="
        cat out/Default/args.gn
        
        # 生成构建文件
        gn gen out/Default

    - name: Build Chromium
      run: |
        cd chromium-build/src
        
        echo "开始构建 Chromium..."
        echo "开始时间: $(date)"
        
        # 设置 ccache
        export CCACHE_BASEDIR=$(pwd)
        ccache --zero-stats
        
        # 构建主目标
        ninja -C out/Default chrome chrome_sandbox chromedriver
        
        echo "构建完成时间: $(date)"
        
        # 显示 ccache 统计
        ccache --show-stats
        
        # 验证构建产物
        ls -la out/Default/chrome*
        file out/Default/chrome
        
        # 检查依赖
        ldd out/Default/chrome | head -10

    - name: Build RPM package
      run: |
        echo "准备构建 RPM 包..."
        
        FULL_VERSION="${PACKAGE_VERSION}.${BUILD_DATE}"
        RPM_NAME="chromium-clang"
        
        # 创建打包目录
        mkdir -p rpm-package/{SOURCES,SPECS,BUILD,BUILDROOT,RPMS,SRPMS}
        cd rpm-package
        
        # 复制构建文件到 SOURCES
        cd ../chromium-build/src
        tar -czf ../../rpm-package/SOURCES/${RPM_NAME}-${FULL_VERSION}.tar.gz \
          --transform "s,^,${RPM_NAME}-${FULL_VERSION}/," \
          out/Default/chrome \
          out/Default/chrome_sandbox \
          out/Default/chromedriver \
          out/Default/*.pak \
          out/Default/locales \
          out/Default/resources
        
        cd ../../rpm-package
        
        # 创建 RPM spec 文件
        cat > SPECS/${RPM_NAME}.spec << EOF
        %global __os_install_post %{nil}
        %global debug_package %{nil}
        %global __strip /bin/true
        
        Name: ${RPM_NAME}
        Version: ${FULL_VERSION}
        Release: 1
        Summary: Chromium web browser compiled with Clang/LLVM
        
        License: BSD-3-Clause AND LGPL-2.1+ AND Apache-2.0
        URL: https://github.com/RobRich999/Chromium_Clang
        Source0: %{name}-%{version}.tar.gz
        
        BuildArch: x86_64
        AutoReqProv: no
        
        # Fedora 依赖关系
        Requires: alsa-lib >= 1.0.19
        Requires: at-spi2-atk
        Requires: at-spi2-core
        Requires: atk >= 2.2.0
        Requires: cairo >= 1.6
        Requires: cups-libs
        Requires: dbus >= 1.6
        Requires: expat
        Requires: fontconfig >= 2.7.0
        Requires: freetype >= 2.4.2
        Requires: gdk-pixbuf2 >= 2.22.0
        Requires: glib2 >= 2.26
        Requires: glibc >= 2.17
        Requires: gtk3 >= 3.0
        Requires: libdrm
        Requires: libX11
        Requires: libXcomposite
        Requires: libXcursor
        Requires: libXdamage
        Requires: libXext
        Requires: libXfixes
        Requires: libXi
        Requires: libXrandr
        Requires: libXrender
        Requires: libXss
        Requires: libXtst
        Requires: libxcb
        Requires: libxkbcommon >= 0.5.0
        Requires: mesa-libgbm
        Requires: nspr >= 4.32
        Requires: nss >= 3.90
        Requires: pango >= 1.22.0
        
        %description
        Chromium compiled with Clang/LLVM and optimizations.
        
        %prep
        %setup -q
        
        %build
        # Already built
        
        %install
        rm -rf %{buildroot}
        
        # Create directory structure
        mkdir -p %{buildroot}/opt/chromium
        mkdir -p %{buildroot}/usr/bin
        mkdir -p %{buildroot}/usr/share/applications
        mkdir -p %{buildroot}/usr/share/pixmaps
        
        # Install files
        cp chrome %{buildroot}/opt/chromium/
        cp chrome_sandbox %{buildroot}/opt/chromium/
        cp chromedriver %{buildroot}/opt/chromium/
        cp *.pak %{buildroot}/opt/chromium/ || true
        cp -r locales %{buildroot}/opt/chromium/ || true
        cp -r resources %{buildroot}/opt/chromium/ || true
        
        # Set permissions
        chmod 4755 %{buildroot}/opt/chromium/chrome_sandbox
        chmod +x %{buildroot}/opt/chromium/chrome
        chmod +x %{buildroot}/opt/chromium/chromedriver
        
        # Create launcher script
        cat > %{buildroot}/usr/bin/chromium-clang << 'EOFSCRIPT'
        #!/bin/bash
        exec /opt/chromium/chrome "\$@"
        EOFSCRIPT
        chmod +x %{buildroot}/usr/bin/chromium-clang
        
        # Create desktop file
        cat > %{buildroot}/usr/share/applications/chromium-clang.desktop << 'EOFDESKTOP'
        [Desktop Entry]
        Version=1.0
        Name=Chromium Clang
        GenericName=Web Browser
        Comment=Access the Internet (Optimized Build)
        Exec=chromium-clang %U
        Terminal=false
        Icon=chromium-clang
        Type=Application
        Categories=Network;WebBrowser;
        MimeType=text/html;text/xml;application/xhtml+xml;
        StartupNotify=true
        EOFDESKTOP
        
        %files
        %defattr(-,root,root,-)
        /opt/chromium/*
        /usr/bin/chromium-clang
        /usr/share/applications/chromium-clang.desktop
        
        %changelog
        * $(date "+%a %b %d %Y") GitHub Actions <actions@github.com> - ${FULL_VERSION}-1
        - Automated build from source
        - Optimizations: ${OPTIMIZATION}, ${TARGET_ARCH}
        EOF
        
        # 使用 Fedora 容器构建 RPM
        echo "使用 Fedora 容器构建 RPM..."
        
        podman run --rm -v $(pwd):/workspace:Z \
          -w /workspace \
          registry.fedoraproject.org/fedora:39 \
          bash -c "
            dnf install -y rpm-build rpm-devel
            rpmbuild --define '_topdir /workspace' -ba SPECS/${RPM_NAME}.spec
          "
        
        # 检查构建结果
        find RPMS -name "*.rpm" -ls
        
        # 复制 RPM 到工作目录根
        cp RPMS/*/*.rpm ../

    - name: Test RPM package
      run: |
        echo "测试 RPM 包..."
        
        # 找到构建的 RPM
        RPM_FILE=$(find . -name "chromium-clang-*.rpm" | head -1)
        
        if [ -f "$RPM_FILE" ]; then
          echo "验证 RPM 包: $RPM_FILE"
          
          # 使用容器测试 RPM 包
          podman run --rm -v $(pwd):/workspace:Z \
            -w /workspace \
            registry.fedoraproject.org/fedora:39 \
            bash -c "
              rpm -qip $RPM_FILE
              echo '--- 文件列表 ---'
              rpm -qlp $RPM_FILE | head -20
              echo '--- 依赖检查 ---'
              rpm -qRp $RPM_FILE | head -10
            "
          
        else
          echo "未找到 RPM 包文件"
          exit 1
        fi

    - name: Create release artifacts
      run: |
        # 创建发布说明
        cat > "release-notes.md" << EOF
        # Chromium Clang RPM Build
        
        **构建信息**
        - Chromium 版本: ${CHROMIUM_VERSION}
        - 修订版本: r${CHROMIUM_REVISION}
        - 构建日期: ${BUILD_DATE}
        - 优化级别: ${OPTIMIZATION}
        - 目标架构: ${TARGET_ARCH}
        - 启用特性: ${ENABLE_FEATURES}
        
        **性能优化**
        - 🚀 Clang/LLVM 编译器
        - 🔗 ThinLTO 链接时优化
        - 📊 PGO 配置文件引导优化
        - 🏗️ ${TARGET_ARCH} CPU 指令集优化
        - ⚡ Fast-math 浮点优化
        - 🎯 自定义编译标志
        
        **安装方法**
        
        ### Fedora/RHEL/CentOS:
        \`\`\`bash
        sudo dnf install ./chromium-clang-*.rpm
        \`\`\`
        
        ### openSUSE:
        \`\`\`bash
        sudo zypper install ./chromium-clang-*.rpm
        \`\`\`
        
        **使用方法**
        \`\`\`bash
        chromium-clang
        \`\`\`
        
        **注意事项**
        - 需要支持 ${TARGET_ARCH} 指令集的 CPU
        - 首次运行可能需要较长时间进行优化
        - 如有问题请检查系统依赖是否完整
        
        **构建环境**
        - 构建系统: Ubuntu $(lsb_release -rs)
        - 编译器: Clang $(clang --version | head -1)
        - 构建时间: 约 $(( SECONDS / 3600 )) 小时 $(( (SECONDS % 3600) / 60 )) 分钟
        EOF
        
        # 创建校验和
        sha256sum *.rpm > checksums.sha256
        
        echo "发布文件准备完成:"
        ls -la *.rpm release-notes.md checksums.sha256

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: chromium-clang-rpm-${{ env.PACKAGE_VERSION }}-${{ env.BUILD_DATE }}
        path: |
          *.rpm
          release-notes.md
          checksums.sha256
        retention-days: 30

    - name: Create GitHub Release
      if: github.event_name == 'workflow_dispatch'
      uses: softprops/action-gh-release@v1
      with:
        tag_name: v${{ env.PACKAGE_VERSION }}-${{ env.TARGET_ARCH }}-${{ env.BUILD_DATE }}
        name: Chromium Clang ${{ env.CHROMIUM_VERSION }} (${{ env.TARGET_ARCH }})
        body_path: release-notes.md
        files: |
          *.rpm
          checksums.sha256
        draft: false
        prerelease: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Cleanup
      if: always()
      run: |
        # 清理构建缓存
        ccache --clear
        
        # 清理大型临时文件
        rm -rf chromium-build/src/out/Default/*.o
        rm -rf chromium-build/src/out/Default/obj
        
        echo "构建完成，清理完毕"
